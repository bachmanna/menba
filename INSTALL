# Menba - All In One installation

Following this step by step guide, you will get a ready to use "all in one" server based on :
- apache web server (could be ngnix or any web server compatible with django)
- rabbitqm amqp broker (could be any amqp broker compatible with celery)
- celery
- django

Of course, someone could split some parts of the solution to distribute load, like rabbitmq server for example.

Obviously, security should be hardened by enabling ssl, but this is out of the scope of this document.

## Operating system

This guide is based on a running ubuntu 20.04 LTS server.

Should work on
- ubuntu 18.04 LTS with few or even no adaptation
- any linux distro with some adaptations
- BSD systems (eg. OpenBSD, NetBSD, FreeBSD) with some adaptations

## Packages

All commands executed as root.

```
apt -y install gettext python3-pip python3-markdown2
```

## Apache

### Installation

All commands executed as root.

```
apt -y install apache2 libapache2-mod-wsgi-py3
```

### Configuration

Add UTF-8 support :

```
echo "export LANG='C.UTF-8'" >> /etc/apache2/envvars
echo "export LC_ALL='C.UTF-8'" >> /etc/apache2/envvars
```

Create `/etc/apache2/sites-available/menba.conf` with the following content :

```
<VirtualHost *:80>

  ServerName 192.168.0.1

  ErrorLog ${APACHE_LOG_DIR}/menba-error.log
  CustomLog ${APACHE_LOG_DIR}/menba-access.log combined

  Alias /robots.txt /home/menba/menba/static/robots.txt
  Alias /favicon.ico /home/menba/menba/static/favicon.ico
  Alias /static/ /home/menba/menba/static/
  Alias /media/ /home/menba/menba/media/
  Alias /files/ /var/lib/menba/files/

  WSGIDaemonProcess menba user=menba group=menba threads=25
  WSGIScriptAlias / /home/menba/menba/menba/wsgi.py process-group=menba
  WSGIProcessGroup menba
  WSGIApplicationGroup menba

  <Directory /home/menba/menba/menba>
    <Files wsgi.py>
      Require all granted
    </Files>
  </Directory>

  <Directory /home/menba/menba/static>
    Require all granted
  </Directory>

  <Directory /home/menba/menba/media>
    Require all granted
  </Directory>

  <Location "/">
    Order Deny,Allow
    <RequireAll>
      Require all granted    
    </RequireAll>
  </Location>

  <Location "/admin">
    Order Deny,Allow
    AuthType Basic
    AuthName "Restricted Content"
    AuthUserFile /etc/apache2/private/htpasswd
    Require valid-user
  </Location>

  <Location "/view">
    Order Deny,Allow
    AuthType Basic
    AuthName "Restricted Content"
    AuthUserFile /etc/apache2/private/htpasswd
    Require valid-user
  </Location>

  <Location "/search">
    Order Deny,Allow
    AuthType Basic
    AuthName "Restricted Content"
    AuthUserFile /etc/apache2/private/htpasswd
    Require valid-user
  </Location>

  <Location "/statistics">
    Order Deny,Allow
    AuthType Basic
    AuthName "Restricted Content"
    AuthUserFile /etc/apache2/private/htpasswd
    Require valid-user
  </Location>

  <Location "/files">
    Order Deny,Allow
    AuthType Basic
    AuthName "Restricted Content"
    AuthUserFile /etc/apache2/private/htpasswd
    Require valid-user
  </Location>

</VirtualHost>
```

Activate the correct configuration :

```
a2dissite 000-default.conf
a2ensite menba.conf
```

Create `password` file and add an account :

```
mkdir /etc/apache2/private
htpasswd -c /etc/apache2/private/htpasswd menba
```

## Django

All commands executed as root.

### Installation

```
pip3 install Django==3.2.1
```

### Configuration

## RabbitMQ

All commands executed as root.

### Installation

Create a script file, eg. `install_rabbitmq.sh` :

```
#!/bin/sh

sudo apt-get install curl gnupg debian-keyring debian-archive-keyring apt-transport-https -y

## Team RabbitMQ's main signing key
sudo apt-key adv --keyserver "hkps://keys.openpgp.org" --recv-keys "0x0A9AF2115F4687BD29803A206B73A36E6026DFCA"
## Launchpad PPA that provides modern Erlang releases
sudo apt-key adv --keyserver "keyserver.ubuntu.com" --recv-keys "F77F1EDA57EBB1CC"
## PackageCloud RabbitMQ repository
sudo apt-key adv --keyserver "keyserver.ubuntu.com" --recv-keys "F6609E60DC62814E"

## Add apt repositories maintained by Team RabbitMQ
sudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF
## Provides modern Erlang/OTP releases
##
## "bionic" as distribution name should work for any reasonably recent Ubuntu or Debian release.
## See the release to distribution mapping table in RabbitMQ doc guides to learn more.
deb http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu focal main
deb-src http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu focal main

## Provides RabbitMQ
##
## "bionic" as distribution name should work for any reasonably recent Ubuntu or Debian release.
## See the release to distribution mapping table in RabbitMQ doc guides to learn more.
deb https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ focal main
deb-src https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ focal main
EOF

## Update package indices
sudo apt-get update -y

## Install Erlang packages
sudo apt-get install -y erlang-base \
                        erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \
                        erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \
                        erlang-runtime-tools erlang-snmp erlang-ssl \
                        erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl

## Install rabbitmq-server and its dependencies
sudo apt-get install rabbitmq-server -y --fix-missing
```

Then execute the installation :

```
chmod u+x install_rabbitmq.sh
./install_rabbitmq.sh
```

### Configuration

```
rabbitmqctl add_user menba super.secret
rabbitmqctl add_vhost menba
rabbitmqctl set_user_tags menba administrator
rabbitmqctl set_permissions -p menba menba ".*" ".*" ".*"
```

## Celery

All commands executed as root.

### Installation

```
pip3 install -U Celery
mkdir -p /var/log/celery /var/run/celery
chown menba:menba /var/log/celery /var/run/celery
```

### Configuration

Create the directory that will receive configuration file :

```
mkdir /etc/conf.d
```

Create `/etc/conf.d/celery` file with the following content :

```
# Name of nodes to start
# here we have a single node
CELERYD_NODES="w1"
# or we could have three nodes:
#CELERYD_NODES="w1 w2 w3"

# Absolute or relative path to the 'celery' command:
CELERY_BIN="/usr/local/bin/celery"
#CELERY_BIN="/virtualenvs/def/bin/celery"

# App instance to use
# comment out this line if you don't use an app
CELERY_APP="menba"
# or fully qualified:
#CELERY_APP="proj.tasks:app"

# How to call manage.py
CELERYD_MULTI="multi"

# Extra command-line arguments to the worker
CELERYD_OPTS="--time-limit=300 --concurrency=8"

# - %n will be replaced with the first part of the nodename.
# - %I will be replaced with the current child process index
#   and is important when using the prefork pool to avoid race conditions.
CELERYD_PID_FILE="/var/run/celery/%n.pid"
CELERYD_LOG_FILE="/var/log/celery/%n%I.log"
CELERYD_LOG_LEVEL="INFO"

# you may wish to add these options for Celery Beat
CELERYBEAT_PID_FILE="/var/run/celery/beat.pid"
CELERYBEAT_LOG_FILE="/var/log/celery/beat.log"
```

### systemd

Create the `/etc/systemd/system/celery.service` file :

```
[Unit]
Description=Celery Service
After=network.target

[Service]
Type=forking
User=menba
Group=menba
EnvironmentFile=/etc/conf.d/celery
WorkingDirectory=/home/menba/menba
ExecStartPre=+/usr/bin/mkdir -p /var/run/celery
ExecStartPre=+/usr/bin/chown menba:menba /var/run/celery
ExecStart=/bin/sh -c '${CELERY_BIN} -A $CELERY_APP multi start $CELERYD_NODES \
    --pidfile=${CELERYD_PID_FILE} --logfile=${CELERYD_LOG_FILE} \
    --loglevel="${CELERYD_LOG_LEVEL}" $CELERYD_OPTS'
ExecStop=/bin/sh -c '${CELERY_BIN} multi stopwait $CELERYD_NODES \
    --pidfile=${CELERYD_PID_FILE} --loglevel="${CELERYD_LOG_LEVEL}"'
ExecReload=/bin/sh -c '${CELERY_BIN} -A $CELERY_APP multi restart $CELERYD_NODES \
    --pidfile=${CELERYD_PID_FILE} --logfile=${CELERYD_LOG_FILE} \
    --loglevel="${CELERYD_LOG_LEVEL}" $CELERYD_OPTS'
Restart=always

[Install]
WantedBy=multi-user.target
```

Then activate :

```
systemctl enable celery.service
systemctl start celery.service
```

## Menba

### Configuration

Create menba user

```
groupadd menba
useradd -g menba -m -s /bin/bash menba
```

Create download repository :

```
mkdir -p /var/lib/menba/files/{studies,series}
chown -R menba:menba /var/lib/menba
```

### Preparation

All commands executed as menba user :

```
su - menba
```

Verification :

```
whoami
menba
```

You should be in `/home/menba` directory :

```
pwd
/home/menba
```

### Download the code :

```
git clone https://github.com/fidelio33b/menba.git
```

### Adapt sample files

#### settings.py

```
cd /home/menba/menba/menba
pwd
/home/menba/menba/menba
```

```
cp settings.py.sample settings.py
```

`settings.py` could be :

```
"""
This file is part of Menba.
Copyright (C) 2021

Menba is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Menba is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Menba.  If not, see <https://www.gnu.org/licenses/>.

Laurent Lavaud <fidelio33b@gmail.com>, 2021.
"""

import os

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'super.secret'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.0.2']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'zhome.apps.ZHomeConfig',
    'zview.apps.ZViewConfig',
    'zsearch.apps.ZSearchConfig',
    'zstats.apps.ZStatsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.RemoteUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.RemoteUserBackend',
)

ROOT_URLCONF = 'menba.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'menba.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    'default': {
	'ENGINE': 'django.db.backends.sqlite3',
	'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LOCALE_PATHS = [ os.path.join(BASE_DIR, 'locale'), ]
LANGUAGE_CODE = 'en-US'
TIME_ZONE = 'America/New_York'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
STATIC_URL = '/static/'

# Pour les médias
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
MEDIA_URL = '/media/'

# Permissions à l'écriture des fichiers dans le répertoire média
FILE_UPLOAD_PERMISSIONS = 0o644

# Pour s'authentifier
LOGIN_URL = '/admin/login/'

# Pour les mails
#EMAIL_HOST = '__CHANGE_ME__'
#EMAIL_PORT = __CHANGE_ME__
#EMAIL_USE_TLS = __CHANGE_ME__
#MAIL_HOST_USER = '__CHANGE_ME__'
#EMAIL_HOST_PASSWORD = '__CHANGE_ME__'

#           _                 
#   ___ ___| | ___ _ __ _   _ 
#  / __/ _ \ |/ _ \ '__| | | |
# | (_|  __/ |  __/ |  | |_| |
#  \___\___|_|\___|_|   \__, |
#                       |___/ 
CELERY_BROKER_URL = 'amqp://menba:super.secret@localhost:5672/menba'
CELERY_TIMEZONE = "America/New_York"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
```

Note: email sending will only work with a correct configuration !

#### wsgi.py

```
cd /home/menba/menba/menba
pwd
/home/menba/menba/menba
```

```
cp wsgi.py.sample wsgi.py
```

`wsgi.py` could be :

```
"""
This file is part of Menba.
Copyright (C) 2021

Menba is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Menba is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Menba.  If not, see <https://www.gnu.org/licenses/>.

Laurent Lavaud <fidelio33b@gmail.com>, 2021.
"""

from os import environ as menviron
from sys import path as mpath

path1 = '/home/menba/menba'
if path1 not in mpath:
    mpath.append(path1)

from django.core.wsgi import get_wsgi_application

menviron.setdefault('DJANGO_SETTINGS_MODULE', 'menba.settings')

application = get_wsgi_application()

from django.contrib.auth.handlers.modwsgi import check_password, groups_for_user
```

#### config.py

```
cd /home/menba/menba/common
pwd
/home/menba/menba/common
```

```
cp config.py.sample config.py
```

`config.py` could be :

```
"""
This file is part of Menba.
Copyright (C) 2021

Menba is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Menba is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Menba.  If not, see <https://www.gnu.org/licenses/>.

Laurent Lavaud <fidelio33b@gmail.com>, 2021.
"""

params = {
    'app': {
        'name': 'Menba',
    },
    'paginate_by': 40,
    'orthanc_server': 'ortc02',
    'orthanc_servers': {
        'ortc01': {
            'host': 'orthanc-server01',
            'port': 8042,
            'user': 'read-only',
            'password': 'super.secret',
        },
        'ortc02': {
            'host': 'orthanc-server02',
            'port': 8042,
            'user': 'read-only',
            'password': 'super.secret',
        },
    },
    'stone_web_viewer': {
        'url': 'https://orthanc-server02/stone-webviewer/index.html?study=',
    },
    'web_viewer': {
        'url': 'https://orthanc-server02/web-viewer/app/viewer.html?series=',
    },
    'files': {
        'directory': {
            'studies' : '/var/lib/menba/files/studies',
            'series' :  '/var/lib/menba/files/series',
        },
        'link': {
            'studies' : 'https://192.168.0.2/files/studies',
            'series' :  'https://192.168.0.2/files/series',
        },
    },
    'mail': {
        'sender': 'noreply@domain.fr',
    },
}
```

Note: you have to adapt orthanc server host and web viewer url, as well as links.

### Launch commands

```
cd /home/menba/menba
```

Create tables :

```
python3 manage.py migrate
```

Then create superuser :

```
python3 manage.py createsuperuser
```

## Finally

Restart the server, point your browser to http://192.168.0.2/ (adapt) and...

## Enjoy !
